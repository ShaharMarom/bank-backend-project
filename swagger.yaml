openapi: 3.0.0
info:
  title: Bank API
  description: REST API for banking operations including user management and transactions
  version: "1.0.0"
servers:
  - url: http://localhost:3000/api/v1
paths:
  /users:
    post:
      summary: Register a new user with phone verification
      description: Create a new user account with email, password, and phone number. An OTP is sent for phone validation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "strongpassword"
                phone:
                  type: string
                  example: "+1234567890"
              required:
                - email
                - password
                - phone
      responses:
        '201':
          description: Confirmation code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Confirmation code sent"
        '400':
          description: Missing input or user already exists

  /users/no-phone:
    post:
      summary: Register a new user without phone verification
      description: Create a new user account with just email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "strongpassword"
              required:
                - email
                - password
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  token:
                    type: string
                    example: "jwt-token"
        '400':
          description: Missing input or user already exists

  /users/verification:
    post:
      summary: Verify phone number with OTP
      description: Validate the OTP sent to user's phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+1234567890"
                code:
                  type: string
                  example: "123456"
              required:
                - phone
                - code
      responses:
        '200':
          description: User verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  token:
                    type: string
                    example: "jwt-token"
        '400':
          description: Invalid code or registration data not found

  /users/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "strongpassword"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User logged in successfully"
                  token:
                    type: string
                    example: "jwt-token"
        '400':
          description: Invalid credentials

  /transactions:
    get:
      summary: List user transactions
      description: Get all transactions for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        sender:
                          type: string
                        recipient:
                          type: string
                        amount:
                          type: number
                        type:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized

    post:
      summary: Create new transaction
      description: Transfer money to another user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientEmail:
                  type: string
                  example: "recipient@example.com"
                amount:
                  type: number
                  example: 100
              required:
                - recipientEmail
                - amount
      responses:
        '200':
          description: Transaction completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction completed successfully"
                  transactionId:
                    type: string
        '400':
          description: Invalid input or insufficient balance
        '401':
          description: Unauthorized

  /transactions/{transactionId}:
    get:
      summary: Get transaction details
      description: Get details of a specific transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction:
                    type: object
                    properties:
                      _id:
                        type: string
                      sender:
                        type: string
                      recipient:
                        type: string
                      amount:
                        type: number
                      type:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
